#Haremos un programa con las Torres de Hanoi.
#Marcaremos primero el pilar inicial, y definiremos dos mas, vacios, que seran los que se empezaran a llenar
p_inicial = [5,4,3,2,1]
n = len(p_inicial)
pilar1 = []
pilar2 = []

pilar2.append(p_inicial.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
pilar1.append(p_inicial.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
pilar1.append(pilar2.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
pilar2.append(p_inicial.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
p_inicial.append(pilar1.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
pilar2.append(pilar1.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
pilar2.append(p_inicial.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
pilar1.append(p_inicial.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
pilar1.append(pilar2.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
p_inicial.append(pilar2.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
p_inicial.append(pilar1.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
pilar1.append(pilar2.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
pilar2.append(p_inicial.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
pilar1.append(p_inicial.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
pilar1.append(pilar2.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
pilar2.append(p_inicial.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
p_inicial.append(pilar1.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
pilar2.append(pilar1.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
pilar2.append(p_inicial.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
p_inicial.append(pilar1.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
pilar1.append(pilar2.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
p_inicial.append(pilar2.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
p_inicial.append(pilar1.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
pilar2.append(pilar1.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
pilar2.append(p_inicial.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
pilar1.append(p_inicial.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
pilar1.append(pilar2.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
pilar2.append(p_inicial.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
p_inicial.append(pilar1.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
pilar2.append(pilar1.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
pilar2.append(p_inicial.pop())
print(str(p_inicial) + "\n" + str(pilar1) + "\n" + str(pilar2) + "\n\n")
